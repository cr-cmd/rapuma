#!/usr/bin/python
# -*- coding: utf-8 -*-

#    Copyright 2014, SIL International
#    All rights reserved.
#
#    This library is free software; you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published
#    by the Free Software Foundation; either version 2.1 of License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should also have received a copy of the GNU Lesser General Public
#    License along with this library in the file named "LICENSE".
#    If not, write to the Free Software Foundation, 51 Franklin Street,
#    suite 500, Boston, MA 02110-1335, USA or visit their web page on the 
#    internet at http://www.fsf.org/licenses/lgpl.html.


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the main Rapuma engine script.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.


###############################################################################
############################# Initialize Rapuma ###############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import os, sys, timeit, datetime
from functools import partial

startTime = timeit.default_timer()

###########################################################################
########################## Location Discovery #############################
###########################################################################

# Set the Rapuma base program paths. It looks in /user/share first for an
# installed copy. If you give it a actual path to the development version
# it will run from there. (~/Projects/rapuma/scripts/rapuma)
# FIXME: Environment variables are set that may not be needed if this block
# of code was turned into a module and called from the dependent modules.
rapumaBase = os.path.dirname(os.path.dirname(sys.argv[0]))
rapumaHome = [d for d in [os.path.join(rapumaBase, 'share', 'rapuma'), 
                        os.path.join(rapumaBase)] if os.path.exists(d)]
rapumaHome = rapumaHome[0] if len(rapumaHome) else None
os.environ['RAPUMA_BASE'] = rapumaHome
# According to the base if found, insert the lib folder into the Python sys path
if rapumaHome :
    sys.path.insert(0, os.path.join(rapumaHome, 'lib'))
# Set the user environment path. This is always in the same place.
userHome = os.path.expanduser(os.path.join('~', '.config', 'rapuma'))
os.environ['RAPUMA_USER'] = userHome

# Set the (potential) project home by looking for the project config file.
def find_project_root(tag, path=os.path.curdir):
    path=os.path.splitdrive(os.path.realpath(os.path.expanduser(os.path.expandvars(path))))[1]
    while (not os.path.exists(os.path.join(path, tag))):
        path = os.path.dirname(path)
        if path == os.path.sep: return None
    return path

# Find the project home
# FIXME: Though we find the home here, it really doesn't mean anything.
# It is not used here in this main script. As noted above, this code
# block should be moved into a seperate module and called by others.
projHome = find_project_root(os.path.join('Config', 'project.conf'))
# If not found, assume that this is a new project situation
if not projHome :
    projHome = os.getcwd()

os.environ['RAPUMA_PROJ'] = projHome

###########################################################################
########################## Location Discovery #############################
###########################################################################

# Load standard Python modules
import codecs, importlib
from configobj                          import ConfigObj

# Load the Rapuma lib classes
from rapuma.core.tools                  import Tools
from rapuma.core.user_config            import UserConfig
#from rapuma.core.proj_local             import ProjLocal
#from rapuma.core.proj_log               import ProjLog
#from rapuma.core.proj_data              import ProjData, Template
#from rapuma.core.proj_binding           import ProjBinding
#from rapuma.core.proj_compare           import ProjCompare
#from rapuma.core.proj_process           import ProjProcess
from rapuma.project.proj_config         import Config
#from rapuma.project.proj_setup          import ProjSetup, ProjDelete
#from rapuma.project.proj_commander      import ProjCommander
#from rapuma.project.proj_font           import ProjFont
#from rapuma.project.proj_hyphenation    import ProjHyphenation
#from rapuma.project.proj_maps           import ProjMaps
#from rapuma.project.proj_toc            import ProjToc
#from rapuma.project.proj_background     import ProjBackground
#from rapuma.projectr.project             import Project

# Load GUI modules
from PySide                             import QtGui, QtCore
from PySide.QtGui                       import QMainWindow, QApplication, QMessageBox, QStackedWidget
from PySide.QtCore                      import QPropertyAnimation
from rapuma.dialog                      import main_dlg
from rapuma.dialog                      import gui_config
from rapuma.icon.pyresources            import qInitResources, qCleanupResources

# Grab some system info
sysConfig                               = ConfigObj(os.path.join(rapumaHome, 'config', 'system.ini'), encoding='utf-8')

# Instantiate User config class
tools                                   = Tools()

# Set some global vars
systemName                              = sysConfig['Rapuma']['systemName']
systemCopyright                         = sysConfig['Rapuma']['systemCopyright']
systemVersion                           = sysConfig['Rapuma']['systemVersion']
systemAbout                             = sysConfig['Rapuma']['systemAbout']
local                                   = None


###############################################################################
################################ Rapuma GUI ###################################
###############################################################################

class RapumaGUI (QMainWindow, QPropertyAnimation, main_dlg.Ui_MainWindow) :

    def __init__ (self, parent=None) :
        '''Initialize and start up the UI'''

#        import pdb; pdb.set_trace()

        super(RapumaGUI, self).__init__(parent)
        # Init app resources
        qInitResources()
        appicon = QtGui.QIcon(':/rpm_256.png')
        appicon.addFile(':/rpm_96.png')
        appicon.addFile(':/rpm_48.png')
        appicon.addFile(':/rpm_32.png')
        appicon.addFile(':/rpm_16.png')
        appicon.addFile(':/rpm.svg')
        self.guiSettings        = gui_config.GuiConfig()
        self.sysConfig          = sysConfig
        self.tools              = Tools()
        self.setWindowIcon(appicon)
        self.setupUi(self)

        # Connect the menu actions
        ctrlDlgs = ['menu_project_add', 'menu_project_remove', 'menu_project_select', 'menu_project_archive', 
                    'menu_project_cloud', 'menu_project_backup', 'menu_project_bind', 'menu_project_reap', 
                    'menu_project_template', 'menu_project_update', 'menu_project_systempreferences',
                    'menu_group_add', 'menu_group_remove', 'menu_group_select', 'menu_group_update',
                    'menu_component_add', 'menu_component_remove', 'menu_component_select', 'menu_component_update',
                    'menu_font_add', 'menu_font_remove', 'menu_font_update',
                    'menu_help_help', 'menu_help_examples']

        mainDlgs = ['menu_project_quit', 'menu_help_about']

        # Import all the menu item modules (one for each item)
        for i in ctrlDlgs :
            # For testing purposes this is the path to the dev project files
            ctrlP   = os.path.join(rapumaHome, 'lib', 'rapuma', 'dialog', i + '_ctrl.py')
            # For operation purposes this is the path to the installed project files
            ctrlS   = os.path.join(rapumaBase, 'lib', 'python2.7', 'dist-packages', 'rapuma', 'dialog', i + '_ctrl.py')
            # Build some names we may need in our process
            mName = ''; fName = ''; oName = ''
            for c in i.split('_') :
                if c == 'menu' :
                    mName = c
                    fName = c[:1]
                    oName = 'a' + c[:1]
                else :
                    mName += c.capitalize() 
                    fName += c.capitalize()
                    oName += c.capitalize()
            # Filter by processing only items that have control files
            if os.path.exists(ctrlS) or os.path.exists(ctrlP) :
                ctrl = 'rapuma.dialog.' + i + '_ctrl'
                # Import dialog control modules
                mod = importlib.import_module(ctrl)
                setattr(self, i + '_ctrl', mod)
                # Connect modules to functions
                setattr(self, oName, self.findChild(QtGui.QAction, mName))
                getattr(self, mName).triggered.connect(getattr(self, fName))
            else :
                # Redirect to a not implemented message
                setattr(self, oName, self.findChild(QtGui.QAction, mName))
                getattr(self, mName).triggered.connect(self.notImplemented)

        # Override control actions in the list with other types of actions
        amProjectQuit       = self.findChild(QtGui.QAction,"menuProjectQuit")
        amProjectQuit.triggered.connect(self.mProjectQuit)
        amHelpAbout         = self.findChild(QtGui.QAction,"menuHelpAbout")
        amHelpAbout.triggered.connect(self.mHelpAbout)

        # Set or reset/update main window dialog settings
        self.updateSettings()

        # FIXME: This prints a simple message in the status bar, can we do more with it?
        self.statusBar().showMessage("Hi There!")


    def updateSettings (self) :
        '''Update or refresh all the settings in this dialog window.'''

        self.userConfig         = UserConfig().userConfig
        self.projectConfig      = None

        # Go to the last item that was selected or go to work area 0 if there is nothing selected
        if self.guiSettings.currentPid :
            # Quick grab the projectConfig, we may need it later
            try :
                self.proj_config = Config(self.guiSettings.currentPid)
                self.proj_config.getProjectConfig()
                self.projectConfig = self.proj_config.projectConfig
            except :
                pass
            # Now find the window to land in
            if self.guiSettings.currentCid :
                self.labelComponentCid.setText(self.guiSettings.currentCid)
                self.setCurrentIndexWorkArea(3)
            elif self.guiSettings.currentGid :
                self.labelGroupGid.setText(self.guiSettings.currentGid)
                self.setCurrentIndexWorkArea(2)
            else :
                self.labelProjectPid.setText(self.guiSettings.currentPid)
                self.setCurrentIndexWorkArea(1)
                self.lineEditProjectName.setText(self.userConfig['Projects'][self.guiSettings.currentPid]['projectName'])
        else :
#            # If no project is selected we get rid of any group and component selections
#            self.guiSettings.setCurrentGid()
#            self.guiSettings.setCurrentCid()
            self.setCurrentIndexWorkArea(0)


    def main (self) :
        '''This function shows the main dialog'''

        self.show()


###############################################################################
############################ Menu Item Functions ##############################
###############################################################################

# Project #####################################################################

    def mProjectAdd (self) :
        dlg = self.menu_project_add_ctrl.MenuProjectAddCtrl(self.guiSettings, self.sysConfig, self.userConfig)
        dlg.exec_()
        if dlg.completed :
            self.updateSettings()

    def mProjectSelect (self) :
        dlg = self.menu_project_select_ctrl.MenuProjectSelectCtrl(self.guiSettings, self.userConfig)
        dlg.exec_()
        if dlg.selectedProject :
            self.updateSettings()

    def mProjectArchive (self) :
        dlg = self.menu_project_archive_ctrl.MenuProjectArchiveCtrl(self.guiSettings, self.userConfig)
        dlg.exec_()
        if dlg.completed :
            self.updateSettings()

    def mProjectBackup (self) :
        dlg = self.menu_project_backup_ctrl.MenuProjectBackupCtrl(self.guiSettings, self.userConfig)
        dlg.exec_()
        if dlg.completed :
            self.updateSettings()

    def mProjectCloud (self) :
        dlg = self.menu_project_cloud_ctrl.MenuProjectCloudCtrl(self.guiSettings, self.userConfig)
        dlg.exec_()
        if dlg.completed :
            self.updateSettings()

    def mProjectReap (self) :
        dlg = self.menu_project_reap_ctrl.MenuProjectReapCtrl(self.guiSettings, self.userConfig)
        dlg.exec_()
        if dlg.completed :
            self.updateSettings()

    def mProjectRemove (self) :

        self.userConfig         = UserConfig().userConfig
        dlg = self.menu_project_remove_ctrl.MenuProjectRemoveCtrl(self.guiSettings, self.userConfig)
        dlg.exec_()
        if dlg.removed :
            self.updateSettings()

    def mProjectTemplate (self) :
        dlg = self.menu_project_template_ctrl.MenuProjectTemplateCtrl(self.guiSettings, self.userConfig)
        dlg.exec_()
        if dlg.completed :
            self.updateSettings()

    def mProjectSystempreferences (self) :
        dlg = self.menu_project_systempreferences_ctrl.MenuProjectSystempreferencesCtrl()
        dlg.exec_()
        if dlg.completed :
            self.updateSettings()

    def mProjectQuit (self) :
        '''Quit the whole program.'''

        sys.exit()

# Group #######################################################################

    def mGroupSelect (self) :
        '''Select a group in the current project.'''

        if self.guiSettings.currentPid :
            dlg = self.menu_group_select_ctrl.MenuGroupSelectCtrl(self.guiSettings, self.userConfig, self.projectConfig)
            dlg.exec_()
            if dlg.selectedGroup :
                self.updateSettings()
        else :
            QMessageBox.warning(self, "Rapuma Warning",
                    """<p>Cannot select a group without a project selected.""")

# Component ###################################################################

    def mComponentSelect (self) :
        '''Select a component from the current selected group.'''
        
        if self.guiSettings.currentGid :
            dlg = self.menu_component_select_ctrl.MenuComponentSelectCtrl(self.guiSettings, self.userConfig, self.projectConfig)
            dlg.exec_()
            if dlg.selectedComponent :
                self.updateSettings()
        else :
            QMessageBox.warning(self, "Rapuma Warning",
                    """<p>Cannot select a component without a group selected.""")

# Help ########################################################################

    def mHelpAbout (self) :

        QMessageBox.about(self, "About Rapuma",
                """<p>""" + systemName + 
                """<p>Version: """ + systemVersion + 
                """<p>Copyright &copy; """ + systemCopyright +
                """<p>""" + systemAbout )

# Support functions ###########################################################

    def notImplemented (self) :

        QMessageBox.information(self, "Rapuma Help",
                """<p>This action has not been implemented yet. Sorry about that.""")

    def getCurrentIndexWorkArea (self) :
        return self.stackedWidgetWorkArea.currentIndex()

    def setCurrentIndexWorkArea (self, index) :
        if index != self.getCurrentIndexWorkArea() :
            self.stackedWidgetWorkArea.setCurrentIndex(index)





###############################################################################
############################## Rapuma Starts Here #############################
###############################################################################

if __name__ == '__main__' :

    app = QApplication(sys.argv)
    window = RapumaGUI()
    window.main()
    sys.exit(app.exec_())












