#!/usr/bin/python
# -*- coding: utf-8 -*-
# version: 20110823
# By Dennis Drescher (dennis_drescher at sil.org


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the mother script of the whole system.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.

# History:
# 20110823 - djd - Started with intial file from TIPE project
# 20111201 - djd - Begin changing to project management model


###############################################################################
################################ Initialize RPM ###############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import os, sys

# Set the RPM base program path
rpmHome = os.environ.get('RPM_BASE')
if not rpmHome :
    rpmHome = os.path.join('usr', 'share', 'rpm')
    os.environ['RPM_BASE'] = rpmHome

# Set the user environment path
userHome = os.environ.get('RPM_USER')
if not userHome :
    sysHome = os.environ.get('HOME')
    userHome = os.path.join(sysHome, '.config', 'rpm')
    os.environ['RPM_USER'] = userHome

# Set the location for RPM internal configuration
if not rpmConfig :
    rpmConfig = os.path.join(rpmHome, 'bin', 'config')

# Set the (potential) project home
projHome = os.getcwd()

# Set our paths to application resources
sys.path.insert(0, os.path.join(rpmHome, 'bin', 'python'))
sys.path.insert(0, os.path.join(rpmHome, 'bin', 'python', 'lib_system'))
sys.path.insert(0, os.path.join(rpmHome, 'bin', 'python', 'lib_managers'))

# Load standard Python modules
import codecs, shutil, operator
from datetime import *
from configobj import ConfigObj

# Load the local classes
from tools import *
from user_config import UserConfig
from sys_command import Command, commands
from project import Project

# Catch any incoming commands here
command = ""
opts = []

if len(sys.argv) > 1 :
    command = sys.argv[1]
    opts = sys.argv[2:]


###############################################################################
######################## Load User and Project Info ###########################
###############################################################################

# Get all our user config info and methods
uConf = UserConfig(userHome, rpmHome)

# Load in project settings if they exist in the cwd
projConfFile = os.path.join(projHome, '.project.conf')
projType = None

# Now create a fresh projConfig object
if os.path.isfile(projConfFile) :
    # Create a fresh merged version of the projConfig
    projConfig  = mergeProjConfig(ConfigObj(projConfFile), projHome, userHome, rpmHome)

    # If we successfuly created a projConfig, the we will load in the type info.
    # For a project conf file to be written out it must be a valid project type
    # so this next part should not fail.
    if projConfig :
        projectType         = projConfig['ProjectInfo']['projectType']
        from proj_command import *
    else :
        terminal('ERROR: Failed to load: ' + projConfFile)
        # die here

    # Fold in the projConfig into the aProject object
    aProject = getattr('FakeName', projectType[0].upper() + projectType[1:], Project)(projConfig, uConf.userConfig, projHome, userHome, rpmHome)

    # Record the project if needed
    try :
        pt = uConf.userConfig['Projects']
    except :
        recordProject(uConf.userConfFile, projConfig, projHome)
        #aProject.writeOutUserConfFile = True
    
else :
    # If there is no project, we still need a
    # dummy projConfig object so we'll just make one up.
    projConfig  = ConfigObj()
    aProject    = Project(projConfig, uConf.userConfig, projHome, userHome, rpmHome)


###############################################################################
############################### Terminal Startup ##############################
###############################################################################

# Do some cleanup like getting rid of the last sessions error log file.
try :
    if os.path.isfile(aProject.projErrorLogFile) :
        os.remove(aProject.projErrorLogFile)
except :
    pass

# Give a welcome message
terminal('\n\t\tWelcome to ' + aProject._userConfig['System']['systemName'] + '  ' + aProject._userConfig['System']['systemVersion'])
terminal('\t\tCurrent User: ' + aProject._userConfig['System']['userName'])
if os.path.isfile(aProject.projConfFile) :
    terminal('\t\tProject: ' + aProject._projConfig['ProjectInfo']['projectName'] + ' (' + aProject._projConfig['ProjectInfo']['projectIDCode'] + ')')
    terminal('\t\tProject Type: ' + aProject._projConfig['ProjectInfo']['projectType'])
    if command :
        terminal('\t\tCurrent Command: ' + command + ' ' + str(opts))
    else :
        terminal('\n\t\tType \"rpm help\" for a list of current commands')
            
else :
    # Just put out an almost blank line
    terminal(' ')

###############################################################################
##################### Prepare and Process RPM Commands #######################
###############################################################################

# Run the command and pass along the aProject object
if command :
    if command in commands :
        # To process there should be one or more options
        if len(opts) >= 1 :
            try :
                commands[command].run(opts, aProject, uConf.userConfig)
            except SyntaxError, err:
                terminal("\n" + str(err) + "\n")
                opts.insert(0, command)
                commands['help'].run(opts, aProject, uConf.userConfig)
        else :
            # If we seem to be short on options then we will just display the help
            # for this command
                terminal('\nHelp for the \"' + command + '\" command:\n')
                commands['help'].run(opts, aProject, uConf.userConfig)
    else :
        terminal('\nERROR: This command does not exist: ' + command)


###############################################################################
########################### Closeout RPM Session #############################
###############################################################################

# Now write out the config files if needed
if aProject.writeOutProjConfFile :
    if not writeConfFile(aProject._projConfig, '.project.conf', projHome) :
        terminal('\nERROR: Could not write to: project config file')

if aProject.writeOutUserConfFile :
    if not writeConfFile(aProject._userConfig, 'rpm.conf', userHome) :
        terminal('\nERROR: Could not write to: user config file')

# Now trim the log file if it is needed
if isConfSection(aProject._projConfig, 'Project') :
    aProject.trimLog(aProject._userConfig['System']['projLogLineLimit'])

## In case there are any Canadians using this, politely say good bye
terminal('\n\t\tThank you, please come again!\n')


