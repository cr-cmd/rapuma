#!/usr/bin/python
# -*- coding: utf-8 -*-
# version: 20120916
# By Dennis Drescher (dennis_drescher at sil.org


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the mother script of the whole system.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.

# History:
# 20111202 - djd - Start with copy of Rapuma and stripped out all the Rapuma related
# stuff to have just the demo stuff


###############################################################################
################################ Initialize Rapuma ###############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import os, sys

# Set the Rapuma base program path
rapumaHome = os.environ.get('RAPUMA_BASE')
if not rapumaHome :
    rapumaHome = os.path.join('usr', 'share', 'rapuma')
    os.environ['RAPUMA_BASE'] = rapumaHome

# Set the Rapuma program resources path
#rapumaResources = os.environ.get('RAPUMA_RESOURCES')
#if not rapumaResources :
#    rapumaResources = os.path.join('usr', 'local', 'share', 'rapuma')
#    os.environ['RAPUMA_RESOURCES'] = rapumaResources

# Set the user environment path
userHome = os.environ.get('RAPUMA_USER')
if not userHome :
    sysHome = os.environ.get('HOME')
    userHome = os.path.join(sysHome, '.config', 'rapuma')
    os.environ['RAPUMA_USER'] = userHome

# Set the (potential) project home
projHome = os.getcwd()

# Load standard Python modules
import codecs, shutil, operator, argparse, subprocess, zipfile
from datetime import *
from configobj import ConfigObj


# Load the local classes
from rapuma.core.proj_local import ProjLocal
from rapuma.core.proj_log import ProjLog
from rapuma.core.tools import *
from rapuma.core.user_config import UserConfig
from rapuma.core.proj_config import ProjConfig
from rapuma.project.project import Project

# Instantiate User classes
local           = ProjLocal(rapumaHome, userHome, projHome)
uc              = UserConfig(local)
log             = ProjLog(local, uc)

# Pull some info from the user config
systemName      = uc.userConfig['System']['systemName']
systemVersion   = uc.userConfig['System']['systemVersion']

# Give a welcome message
terminal('\n\t\tWelcome to ' + systemName + '  ' + systemVersion + '\n')


###########################################################################
########################### Rapuma Demo Functions ############################
###########################################################################



###############################################################################
############################### Testing Functions #############################
###############################################################################

# These need to be moved out to a seperate script

def getExampleSourceProject (exampID) :
    '''Create a test project from example projects located in the 
    example_lib folder in the Rapuma system. This is for system testing
    and nifty canned demos.'''

    exampleFile     = os.path.join(local.rapumaExamplesFolder, exampID + '.zip')
    demoPath        = os.path.join(local.projHome, exampID)
    demoFile        = os.path.join(demoPath, exampID + '.rapumaDemo')
    thisZipFile     = zipfile.ZipFile(exampleFile, 'r')
    if os.path.isfile(exampleFile) :
        thisZipFile.extractall()
        # Set execute permission on scripts
        for r,d,f in os.walk(demoPath):
            for fn in f:
                if not fName(fn)[-1] == '~' :
                    if isExecutable(os.path.join(r, fn)) :
                        makeExecutable(os.path.join(r, fn))

        terminal('Extracted the [' + exampID + '] ParaTExt example project.')


def runExamplePubDemoProject (demoID) :
    '''Run an example demo file to test/demonstrate a project.'''

    # FIXME: Everywhere else we use subprocess.call() to do a process.  However,
    # in this case it takes too much fiddling to get a these more complex Rapuma
    # calls to run from within Rapuma.  To make it easy, we use os.system() to make
    # the call out.
    demoFile = os.path.join(local.projHome, demoID + '.rapumaDemo')
    if os.path.isfile(demoFile) :
        demo = codecs.open(demoFile, "r", encoding='utf_8')
        for line in demo :
            if line[:1] != '#' and line[:1] != '' and line[:1] != '\n' :
                os.system(line)
        return True
    else :
        terminal('File not found: ' + fName(demoFile))


###############################################################################
############################# Rapuma Command Center ##############################
###############################################################################

# All command options must contain a project ID (-i). That is required. If one
# is not listed then the incoming command is either considered malformed or
# incomplete. If there is a way to figure out what the user might be needing
# the help system will be called. Otherwise, Rapuma will quite.

# The argument handler
def userArguments (args) :
    '''Process incoming command arguments.'''

    # Testing commands
    if sys.argv[1].lower() == 'test' :
        if args['source_id'] :
            getExampleSourceProject(args['source_id'])

        if args['demo_id'] :
            runExamplePubDemoProject(args['demo_id'])

    # Extra help access
    elif sys.argv[2].lower() == 'help' :
        if args['about'] :
            terminal('\n' + systemName + ' version ' + systemVersion + '\n')
            terminal('About: ' + systemAbout + '\n')

        if args['basic'] :
            accessHtmlHelp()

    # Totally lost
    else:
        sys.exit('Error: Command not recognized! ')


###############################################################################
############################### Argparser Setup ###############################
###############################################################################

# Setup the arg parser
parser = argparse.ArgumentParser(description=systemName)
subparsers = parser.add_subparsers(help='sub-command help')

# Add help subprocess arguments
helpCommand = subparsers.add_parser('help', help='General system help')

# Add main arguments (first postion options)
parser.add_argument('-a', '--about', action='store_true', help = 'About Rapuma')
parser.add_argument('-b', '--basic', action='store_true', help = 'Basic Rapuma help (in HTML)')

# Add testing subprocess arguments
testCommand = subparsers.add_parser('test', help='General system testing commands help')
testCommand.add_argument('-s', '--source_id', help='Example source ID of the test project taken from the example library you want to setup. This should be a valid ZIP file name, without the .zip extention.')
testCommand.add_argument('-d', '--demo_id', help='Example demo ID of the publishing test project taken from the source example that was (or is to be) setup. The ID is combined with a \'.rapumaDemo\' extention which should be a valid file name.')

# Send the collected arguments to the handler
userArguments(vars(parser.parse_args()))


###############################################################################
########################### Close out the session #############################
###############################################################################


# In case there are any Canadians using this, politely say good bye
terminal('\n\t\tThank you, please come again!\n')


