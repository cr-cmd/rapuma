Installation instructions for Rapuma
	By Dennis Drescher (dennis_drescher@sil.org)
	Last edited: 19 August 2014

RAPUMA (RApid PUblication MAnager) is intended to be a system for managing publication data that could be used for output in a variety of media. Rapuma takes data from the editing environment and allows the user to create, manage and apply repeatable processes to the publication data for output. An example would be a USFM manuscript created and edited in ParaTExt being output to a print-ready PDF document. This would be for printing a book which contains all its components such as front and back matter, contents, maps and cover. Rapuma should be able to manage all the various processes that go into a publication such as this and when it is complete, all the data components ready for archiving.

STATUS: Currently Rapuma is under heavy development (by one, part-time, amateur Python programmer) and only has a command line API. There are hopes to develop a GUI once a useful number of features have been implemented. Deployment of Rapuma in a limited scope, primarily text processing, began in October 2012. It was "feature-adequate" by early 2013, in time to do a Bible publication.

The instructions below are for manually installing the Rapuma publishing system package on a typical Ubuntu-ish operating system (currently Linux Mint 17 - based on Ubuntu 14.04/Trusty Tahr). Ultimately we want Rapuma to completely install from the package but at this point, given the state of flux it is in, it is best to get the latest code from the github repository and manually install it. The installation commands listed here will be done in the terminal. If you have not opened a terminal yet, do it now.


-------------------------------------------------------------------------------
SYSTEM SETUP
-------------------------------------------------------------------------------
Go to the SIL Linux packages site and hook your system up with that if it isn't already. Follow the instructions on this page:

    http://packages.sil.org

Now run the following commands in your terminal:

    sudo apt-get update
    sudo apt-get upgrade

Note the upgrade could take some time. Also, if it asks, answer yes to the "install without verification" question.

Next, in the terminal, you need to install all the necessary packages to run the Rapuma publishing system in various ways. There are several categories/levels of packages you will need to be aware of. They are as follows:

-------------------------------------------------------------------------------
1) REQUIRED PACKAGES FOR BASIC CLI AND HEADLESS OPERATION:
-------------------------------------------------------------------------------

This is the basic set of packages needed to run Rapuma from the CLI (Command Line Interface) and headless access by a web server-based interface:

    sudo apt-get install python-configobj python-argparse python-pypdf pdftk librsvg2-bin

Another required package is the Palaso Python library. Rapuma depends on a couple parts of that.
At this time, this is not a formal Ubuntu package and needs to be added to your system by cloning the project, to do this use the following install proceedure.

a) To obtain the Palaso software, you will need to first need to be sure that you have mercurial installed on your system. If you do not, install with this command:

    sudo apt-get install mercurial

b) If you have mercurial you can install the palaso software. It can be cloned from here with this command:

    hg clone http://hg.palaso.org/palaso-python ~/Projects/palaso-python

c) This python package needs to be installed before you can use it. To install run these commands:

    cd ~/Projects/palaso-python
    ./setup.py --nokmn build
    sudo ./setup.py --nokmn install

(Note: need to add simple test for install of palaso-python)


-------------------------------------------------------------------------------
2) REQUIRED FOR ADVANCED CLI AND GUI OPERATION:
-------------------------------------------------------------------------------

Some Rapuma features that require user interaction (via  can be accessed with these packages involved.

    sudo apt-get install evince meld

Some suggested additional package(s) to make your Linux DTP system complete:

    sudo apt-get install libfont-ttf-scripts-perl

Some additional SIL packages that may, or may not, be available via that repo:

    sudo apt-get install libteckit-perl teckit

XeTeX normally comes bundled with Rapuma. However, it may become necessary to use an external version of XeTeX. The best source for this is through the texlive package. To install texlive, use this command in the terminal:

    sudo apt-get install texlive-xetex

This should install just enough to render with an external version of XeTeX. In the process of installing texlive, a dependency conflict may arrise, this is because of the way the texlive package is currently put together. It will block TECKit from being able to install correctly. It may be some time before this is fixed so a work-around can be applied by doing the following:

    sudo dpkg-divert --package teckit --add /usr/bin/teckit_compile

Once the above packages are installed, log out and log back in again so the system will properly recognize the newly installed packages.

With all the above packages installed, we are ready to move on to installing Rapuma publishing package.


-------------------------------------------------------------------------------
3) GITTING RAPUMA
-------------------------------------------------------------------------------

To obtain Rapuma, you need to check it out from the github repository it resides in. To simplify these instructions we will assume that the Rapuma package will go in a folder called "~/Projects" but you are welcomed to put it wherever you want.

Open a terminal in the Projects folder, then run this command:

    git clone https://github.com/sillsdev/rapuma.git

This will create a folder named rapuma in the Projects folder. The main branch is the default. That version should always be good for production work. However, to change to the "experimental" branch where active development is going on and things are more on the cutting edge, use this command:

    git checkout personal/dennis

There is no guarantee what will happen with the experimental branch, it could break your project and you could loose data. You have been warned. To change back to the stable branch, use this command: 

    git checkout master

Each time you change to a different branch, be sure to follow the setup instructions below so the current version is properly installed into your system. Otherwise confusion will result.

One way to better know what branch you are in is to have it displayed on the command line. The following does not work in all situations. Look for the ~/.bashrc file in your home folder. If you do not have one, then create one and add this line to it:

    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\[\033[1;34m\]$(__git_ps1)\[\033[0m\]\$ '

If you do have one, and it is somewhat complecated, then you might want to look at this tutorial before attempting to edit it:

    http://askubuntu.com/questions/249174/prepend-current-git-branch-in-terminal


-------------------------------------------------------------------------------
4) PACKAGE INSTALLATION AND SETUP
-------------------------------------------------------------------------------

Like the palaso.python setup you will use the setup.py script. With a terminal in the root of the rapuma repository on your local machine, run:

    cd ~/Projects/rapuma
    ./setup.py build
    sudo ./setup.py install

To test the instalation, type:

    rapuma -h

What you should get is a Rapuma help screen. To get started using it, read the quickstart file that is in the rapuma repo directory.


