#!/usr/bin/python
# -*- coding: utf-8 -*-
# version: 20110823
# By Dennis Drescher (dennis_drescher at sil.org


###############################################################################
######################### Description/Documentation ###########################
###############################################################################

# One script to rule them all.  This is the mother script of the whole system.
# This script will drive all processes and keep track of what happens in the
# project log in each respective project.

# History:
# 20111202 - djd - Start over with manager-centric model


###############################################################################
################################ Initialize RPM ###############################
###############################################################################
# Firstly, import all the standard Python modules we need for this process and
# set the base path

import os, sys

# Set basic system vars
systemName = "Rapid Publication Manager (RPM)"
systemVersion = "0.0.1"
systemAbout = "RPM is a Scripture publishing management system written by the friendly developers at Payap University\'s Linguistics Institute (Text Unit). RPM stands for Rapid Publication Manager. It is currently being deployed in MSEAG and is under heavy development. Anyone wanting to try this system should be warned that it may not work in their context. However, the underlying principals of the system should work in any long document publishing environment. Therefore the package should be evaluated with that in mind. We welcome input and participation in this project. It is our hope it will be able to serve more than just MSEAG. For questions or more information please write: dennis_drescher@sil.org."


# Set the RPM base program path
rpmHome = os.environ.get('RPM_BASE')
if not rpmHome :
    rpmHome = os.path.join('usr', 'share', 'rpm')
    os.environ['RPM_BASE'] = rpmHome

# Set the user environment path
userHome = os.environ.get('RPM_USER')
if not userHome :
    sysHome = os.environ.get('HOME')
    userHome = os.path.join(sysHome, '.config', 'rpm')
    os.environ['RPM_USER'] = userHome

# Set the location for RPM internal configuration
rpmConfig = os.path.join(rpmHome, 'bin', 'config')

# Set the (potential) project home
projHome = os.getcwd()

# Set our paths to application resources
sys.path.insert(0, os.path.join(rpmHome, 'python_lib', 'rpm', 'core'))
sys.path.insert(0, os.path.join(rpmHome, 'python_lib', 'rpm', 'manager'))
sys.path.insert(0, os.path.join(rpmHome, 'python_lib', 'rpm', 'project'))
sys.path.insert(0, os.path.join(rpmHome, 'python_lib', 'rpm', 'component'))

# Load standard Python modules
import codecs, shutil, operator
from datetime import *
from configobj import ConfigObj

# Load the local classes
from tools import *
from user_config import UserConfig
from sys_command import Command, commands
from project import *

# Catch any incoming commands here
command = ""
opts = []

if len(sys.argv) > 1 :
    command = sys.argv[1]
    opts = sys.argv[2:]


###############################################################################
######################## Load User and Project Info ###########################
###############################################################################

# Get all our user config info and methods
uConf = UserConfig(userHome, rpmHome)

# Create basic system path/file names
projConfFile = os.path.join(projHome, '.config' 'project.conf')
projLogFile = os.path.join(projHome, '.rpm.log')
projErrorLogFile = os.path.join(projHome, 'error.log')
projType = None

# Instantiate Project class
aProject = Project(uConf.userConfig, projHome, userHome, rpmHome)


# Read the project.conf to start the process or pass through and quite
if os.path.isfile(projConfFile) :
    # Create a fresh merged version of the projConfig
    projConfig  = ConfigObj(projConfFile)
    projectType = projConfig['ProjectInfo']['projectType']
    buildConfSection(uConf.userConfig, 'Projects')
    recordProject(uConf.userConfFile, projConfig, projHome)
# FIXME
    # Init the project here
#    aProject = Project(projConfig, userConfig, projHome, userHome, rpmHome)


###############################################################################
############################### Terminal Startup ##############################
###############################################################################

# Do some cleanup like getting rid of the last sessions error log file.
try :
    if os.path.isfile(projErrorLogFile) :
        os.remove(projErrorLogFile)
except :
    pass

# Give a welcome message
terminal('\n\t\tWelcome to ' + systemName + '  ' + systemVersion)
terminal('\t\tCurrent User: ' + uConf.userConfig['System']['userName'])
if os.path.isfile(projConfFile) :
    terminal('\t\tProject: ' + projConfig['ProjectInfo']['projectName'] + ' (' + projConfig['ProjectInfo']['projectIDCode'] + ')')
    terminal('\t\tProject Type: ' + projConfig['ProjectInfo']['projectType'])
    if command :
        terminal('\t\tCurrent Command: ' + command + ' ' + str(opts))
    else :
        terminal('\n\t\tType \"rpm help\" for a list of current commands')
            
else :
    # Just put out an almost blank line
    terminal(' ')

###############################################################################
##################### Prepare and Process RPM Commands #######################
###############################################################################

aProject.makeProject()

# Run the command and pass along the aProject object
#if command :
#    if command in commands :
#        # To process there should be one or more options
#        if len(opts) >= 1 :
#            try :
#                commands[command].run(opts, aProject, uConf.userConfig)
#            except SyntaxError, err:
#                terminal("\n" + str(err) + "\n")
#                opts.insert(0, command)
#                commands['help'].run(opts, aProject, uConf.userConfig)
#        else :
#            # If we seem to be short on options then we will just display the help
#            # for this command
#                terminal('\nHelp for the \"' + command + '\" command:\n')
#                commands['help'].run(opts, aProject, uConf.userConfig)
#    else :
#        terminal('\nERROR: This command does not exist: ' + command)


###############################################################################
########################### Closeout RPM Session #############################
###############################################################################

# Now write out the config files if needed
#if aProject.writeOutProjConfFile :
#    if not writeConfFile(projConf, '.project.conf', projHome) :
#        terminal('\nERROR: Could not write to: project config file')

#if aProject.writeOutUserConfFile :
#    if not writeConfFile(aProject._userConfig, 'rpm.conf', userHome) :
#        terminal('\nERROR: Could not write to: user config file')

## Now trim the log file if it is needed
#if isConfSection(aProject._projConfig, 'Project') :
#    aProject.trimLog(aProject._userConfig['System']['projLogLineLimit'])

### In case there are any Canadians using this, politely say good bye
#terminal('\n\t\tThank you, please come again!\n')


