Manual installation instructions for the developer version of the RPM package
	By Dennis Drescher (dennis_drescher@sil.org)
	Last edited: 21/06/2012


These are instruction for manually installing the developer version of the RPM publishing system package on a typical Ubuntu operating system (currently Precise, 12.04). Ultimately we want RPM to completely install from the package but at this point, given the state of flux it is in, it is best to get the latest code from the repository and manually install it. Most of the installation commands here will be done in the terminal. If you have not opened a terminal yet, do it now.


REQUIRED PACKAGES
-----------------------------------------
There are a number of packages that need to be installed for RPM to work. Some are more critical than others but all of them are needed. Some of the packages are located in other repositories that you will need to add to your system repository source list. Fastest way is to open the sources.list file for editing with this command in your terminal:

	sudo gedit /etc/apt/sources.list

Next, in gedit in the file you just opened, go to the bottom of the file and add this line if it does not already exist in the file:

	deb http://packages.sil.org/ubuntu oneiric main

Save the file and close it.

Again, in the terminal, update your package list and update your system with the folling command and answer yes to the "install without verification" question:

	sudo apt-get update
	sudo apt-get upgrade

Next, in the terminal, you need to install all the necessary packages to run the RPM publishing system. There are two categories, required and suggested. When you use this command, be sure to review the list of programs that it is proposing to install. Look for any that it might want to remove. Be sure no critical programs are being removed. If you are not sure, do not go any further. Here are packages to install:

Required:

	sudo apt-get install texlive texlive-xetex python-htmlgen python-configobj python-mako evince inkscape zim python-gtk2 python-vte python-argparse pdftk mercurial meld

Another required package is the Palaso Python library. RPM depends on a couple parts of that.
At this time, that package needs to be added to your system by cloning the project, then
following the install proceedure. It can be cloned from here:

    http://hg.palaso.org/palaso-python

When you install (run the setup.py script) without special settings you will probably get
this error:

    ImportError: No module named Pyrex.Distutils.extension

Rerun with this syntax:

    sudo setup.py install --nokmn

Suggested additional packages:

    sudo apt-get install libgtk2-spell-perl tortoisehg

Suggested SIL Packages:

sudo apt-get install libteckit-perl teckit libfont-ttf-scripts-perl

(Note: On newer versions of Ubuntu, the SIL repo may not be up to date so some of the above may not be available.)

Finally, log out and log back in again so the system will properly recognize the newly installed packages and the TortoiseHg package should work correctly.

With all the above packages installed, we are ready to move on to installing RPM publishing package.

GETTING RPM
-----------------------------------------
To obtain the RPM, you need to check it out from the Mercurial repository it resides in. To simplify these instructions we will assume that the RPM package will go in this location:

	~/Projects

Create the above path if it does not exist with this command in your terminal:

	mkdir ~/Projects

Now you can to go to the Palaso website and clone the project code with:

	hg clone http://hg.palaso.org/rpm ~/Projects/rpm

That should put RPM where you need it. From time to time you may want to update it. To do that, from inside the RPM project folder (~/Projects/rpm), this is the command you need:

	hg pull --update


SYSTEM INSTALLATION AND SETUP
-----------------------------------------
For easier operation it is necessary to get RPM properly located in your system. The first thing that needs to be done is to link rpm.conf file (that will be in your user folder) to /etc folder. That is done with:

	sudo ln -sf ~/.config/rpm/rpm.conf /etc/rpm.conf
	
Note that if you go look at /etc/rpm.conf you will see that it is a broken link. That is because ~/.config/rpm/rpm.conf does not yet exsist, but it will after you run RPM for the first time, then every thing will be happy.

Now we will get RPM in your path by editing the ~/.profile file. To do that use this command:

	sudo gedit ~/.profile

Add this to the end of the file you just opened on its own line:

    # Export the RPM user and system paths
    export RPM_BASE="$HOME/Projects/rpm"
    export RPM_USER="$HOME/.config/rpm"
	
Save the file and close it. Next time you reboot or login, the new path settings will be there.

If you don't want to reboot right now and you just want to get it working on the current login (terminal) use:

	source ~/.profile

That will enable you to test in the current terminal but if you want it to take effect system-wide then you will need to log off then log back in.

Test to see if the system recognizes the additional path with:

	echo $RPM_BASE
	echo $RPM_USER

After running this command you should see a path that leads to RPM.

Next we need link RPM (main program) to /usr/local/bin so it can be started from any location like a real program would. First, varify that you have a bin folder. If you do not, create it in your terminal with this command:

	mkdir ~/bin

Now, you will need to link a couple utilities that are good to run globally out of the ~/bin folder and some links that will enable you to right-click from the Nautilus file browser. To make these links, run each of these commands in order:

	sudo ln -s ~/Projects/rpm/bin/rpm /usr/local/bin/rpm
	ln -s ~/Projects/rpm/bin/sh/multi-txtconv.sh ~/bin/multi-txtconv.sh
	ln -s ~/Projects/rpm/bin/python/lib_extras/get-clip ~/bin/get-clip
	ln -s ~/Projects/rpm/bin/sh/rpm ~/.gnome2/nautilus-scripts/RPM
	ln -s ~/Projects/rpm/bin/sh/Open\ Terminal ~/.gnome2/nautilus-scripts/Open\ Terminal

This should complete the manual installation of rpm. Now you should be able to start the program from your terminal at any location with:

	rpm -h

Go a head, give it a try. What you should see is an RPM help screen. That's about all it
does for now.



QUICK START GUIDE
-----------------------------------------
Write something here!
